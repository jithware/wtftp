CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

PROJECT(WTFTP) 

IF(CMAKE_BUILD_TYPE MATCHES Debug)
    MESSAGE("Building in debug mode.")
    SET(CMAKE_VERBOSE_MAKEFILE ON)
    ADD_DEFINITIONS(-DWTFTP_DEBUG)
ENDIF(CMAKE_BUILD_TYPE MATCHES Debug)

SET(WTFTP_MAJOR_VERSION 0)
SET(WTFTP_MINOR_VERSION 1)
SET(WTFTP_PATCH_VERSION 0)
SET(WTFTP_BUILD_VERSION 1)
SET(WTFTP_VERSION "${WTFTP_MAJOR_VERSION}.${WTFTP_MINOR_VERSION}.${WTFTP_PATCH_VERSION}")
ADD_DEFINITIONS(-DWTFTP_VERSION="${WTFTP_VERSION}")

IF(MINGW)
	IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
		MESSAGE(STATUS "Targeting msys64")
		INCLUDE_DIRECTORIES(C:/msys64/mingw64/x86_64-w64-mingw32/include C:/msys64/usr/include)
		LINK_DIRECTORIES(C:/msys64/mingw64/x86_64-w64-mingw32/lib C:/msys64/usr/lib)
		SET(CMAKE_C_FLAGS "-LC:/msys64/mingw64/x86_64-w64-mingw32/lib -DAPR_DECLARE_STATIC -DAPU_DECLARE_STATIC -D_LARGEFILE64_SOURCE")
	ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
		MESSAGE(STATUS "Targeting msys32")
		INCLUDE_DIRECTORIES(C:/msys32/mingw32/i686-w64-mingw32/include C:/msys32/usr/include)
		LINK_DIRECTORIES(C:/msys32/mingw32/i686-w64-mingw32/lib C:/msys32/usr/lib)
		SET(CMAKE_C_FLAGS "-LC:/msys32/mingw32/i686-w64-mingw32/lib -DAPR_DECLARE_STATIC -DAPU_DECLARE_STATIC -D_LARGEFILE64_SOURCE")
	ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(CMAKE_C_STANDARD_LIBRARIES "-ladvapi32 -lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -lwpcap -lpacket -liphlpapi -lws2_32 -lrpcrt4 -lmswsock")
ENDIF(MINGW)

IF(UNIX AND NOT APPLE)
        SET(CMAKE_C_FLAGS "-D_LARGEFILE64_SOURCE")
ENDIF(UNIX AND NOT APPLE)

SET(CMAKE_MODULE_PATH "${WTFTP_SOURCE_DIR}/CMakeModules/")
FIND_PACKAGE(Pcap REQUIRED)
FIND_PACKAGE(Libnet REQUIRED)
FIND_PACKAGE(Apr)
FIND_PACKAGE(AprUtil)
FIND_PACKAGE(Netlink)
FIND_PACKAGE(Iwlib)

INCLUDE(CheckIncludeFile)
CHECK_INCLUDE_FILE (netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILE (winsock2.h HAVE_WINSOCK2_H)
CONFIGURE_FILE(${WTFTP_SOURCE_DIR}/config.h.in ${WTFTP_SOURCE_DIR}/config.h)

ADD_SUBDIRECTORY(lib)

IF(APR_FOUND AND APRUTIL_FOUND)
        MESSAGE("Building wtftpd executable.")
        IF(HAVE_NETINET_IN_H AND NETLINK_FOUND AND IWLIB_FOUND)
                MESSAGE("Building wtftpd with wireless configuration.")
                ADD_DEFINITIONS(-DHAVE_WAPI)
                SET(HAVE_WAPI TRUE)
                ADD_SUBDIRECTORY(wapi)
        ELSE(HAVE_NETINET_IN_H AND NETLINK_FOUND AND IWLIB_FOUND)
                IF(NOT HAVE_NETINET_IN_H)
                        MESSAGE(WARNING "Required <netinet/in.h> include not found.")
                ENDIF(NOT HAVE_NETINET_IN_H)
                IF(NOT NETLINK_FOUND)
                        MESSAGE(WARNING "Required netlink library not found.")
                ENDIF(NOT NETLINK_FOUND)
                IF(NOT IWLIB_FOUND)
                        MESSAGE(WARNING "Required iwlib library not found.")
                ENDIF(NOT IWLIB_FOUND)
                MESSAGE(WARNING "Disabling wtftp with wireless configuration.")
        ENDIF(HAVE_NETINET_IN_H AND NETLINK_FOUND AND IWLIB_FOUND)
        ADD_SUBDIRECTORY(wtftpd)
ELSE(APR_FOUND AND APRUTIL_FOUND)
        MESSAGE(WARNING "Required apr and apr-util libraries not found.")
        MESSAGE(WARNING "Disabling wtftpd daemon build.")
ENDIF(APR_FOUND AND APRUTIL_FOUND)
